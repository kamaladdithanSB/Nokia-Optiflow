import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AlertTriangle, Zap, Clock } from "lucide-react";
import { Badge } from "@/components/ui/badge";

export default function DisruptionSimulator({ machines, workers, onDisruption }) {
  const [selectedResource, setSelectedResource] = useState('');
  const [disruptionType, setDisruptionType] = useState('');
  const [activeDisruptions, setActiveDisruptions] = useState([]);

  const triggerDisruption = () => {
    if (!selectedResource || !disruptionType) return;

    const disruption = {
      id: Date.now(),
      resource: selectedResource,
      type: disruptionType,
      timestamp: new Date().toLocaleTimeString()
    };

    setActiveDisruptions(prev => [...prev, disruption]);
    onDisruption(disruption);

    // Auto-resolve after 30 seconds for demo
    setTimeout(() => {
      setActiveDisruptions(prev => prev.filter(d => d.id !== disruption.id));
    }, 30000);
  };

  const resolveDisruption = (disruptionId) => {
    setActiveDisruptions(prev => prev.filter(d => d.id !== disruptionId));
  };

  return (
    <Card className="shadow-lg border-0">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-xl font-bold text-orange-600">
          <AlertTriangle className="w-5 h-5" />
          Disruption Simulator
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-3">
          <Select value={selectedResource} onValueChange={setSelectedResource}>
            <SelectTrigger>
              <SelectValue placeholder="Select Resource" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value={null}>Select Resource</SelectItem>
              {machines.map(machine => (
                <SelectItem key={machine.id} value={`machine-${machine.id}`}>
                  Machine: {machine.name}
                </SelectItem>
              ))}
              {workers.map(worker => (
                <SelectItem key={worker.id} value={`worker-${worker.id}`}>
                  Worker: {worker.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select value={disruptionType} onValueChange={setDisruptionType}>
            <SelectTrigger>
              <SelectValue placeholder="Disruption Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="breakdown">Machine Breakdown</SelectItem>
              <SelectItem value="maintenance">Maintenance</SelectItem>
              <SelectItem value="absent">Worker Absent</SelectItem>
              <SelectItem value="delay">Material Delay</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <Button 
          onClick={triggerDisruption}
          disabled={!selectedResource || !disruptionType}
          className="w-full bg-orange-500 hover:bg-orange-600"
        >
          <Zap className="w-4 h-4 mr-2" />
          Trigger Disruption
        </Button>

        {activeDisruptions.length > 0 && (
          <div className="space-y-2">
            <h4 className="font-medium text-gray-700">Active Disruptions:</h4>
            {activeDisruptions.map(disruption => (
              <div key={disruption.id} className="flex items-center justify-between p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center gap-2">
                  <AlertTriangle className="w-4 h-4 text-red-500" />
                  <div className="text-sm">
                    <div className="font-medium text-red-700">
                      {disruption.type} - {disruption.resource}
                    </div>
                    <div className="text-red-600">{disruption.timestamp}</div>
                  </div>
                </div>
                <Button 
                  size="sm" 
                  variant="outline"
                  onClick={() => resolveDisruption(disruption.id)}
                >
                  Resolve
                </Button>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}