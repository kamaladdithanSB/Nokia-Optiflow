import React from 'react';
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { CheckCircle, Clock, AlertCircle, XCircle } from "lucide-react";

const statusOptions = [
  { value: 'queued', label: 'Queued', icon: Clock, color: 'text-gray-600' },
  { value: 'in_progress', label: 'In Progress', icon: Clock, color: 'text-blue-600' },
  { value: 'completed', label: 'Completed', icon: CheckCircle, color: 'text-green-600' },
  { value: 'delayed', label: 'Delayed', icon: AlertCircle, color: 'text-red-600' }
];

export default function JobStatusUpdater({ job, onStatusChange, workers }) {
  const handleStatusUpdate = (newStatus) => {
    const updatedJob = { ...job, status: newStatus };
    
    // Auto-set completion time if marking as completed
    if (newStatus === 'completed' && !job.end_time) {
      updatedJob.end_time = new Date().toISOString();
    }
    
    onStatusChange(updatedJob);
  };

  const getWorkerName = (workerId) => {
    const worker = workers.find(w => w.id === workerId);
    return worker ? worker.name : workerId;
  };

  const currentStatus = statusOptions.find(s => s.value === job.status);
  const StatusIcon = currentStatus?.icon || Clock;

  return (
    <div className="flex items-center gap-3">
      <div className="flex items-center gap-2">
        <StatusIcon className={`w-4 h-4 ${currentStatus?.color}`} />
        <span className="text-sm font-medium">{currentStatus?.label}</span>
      </div>
      
      {job.assigned_worker && (
        <span className="text-sm text-gray-600">
          Assigned to: {getWorkerName(job.assigned_worker)}
        </span>
      )}

      <Select value={job.status} onValueChange={handleStatusUpdate}>
        <SelectTrigger className="w-32">
          <SelectValue />
        </SelectTrigger>
        <SelectContent>
          {statusOptions.map(option => (
            <SelectItem key={option.value} value={option.value}>
              <div className="flex items-center gap-2">
                <option.icon className={`w-3 h-3 ${option.color}`} />
                {option.label}
              </div>
            </SelectItem>
          ))}
        </SelectContent>
      </Select>

      {job.status === 'in_progress' && (
        <Button
          size="sm"
          onClick={() => handleStatusUpdate('completed')}
          className="bg-green-600 hover:bg-green-700"
        >
          <CheckCircle className="w-3 h-3 mr-1" />
          Complete
        </Button>
      )}
    </div>
  );
}